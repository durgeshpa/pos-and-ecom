# Generated by Django 2.1 on 2022-04-04 16:24

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BulkRetailerProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('products_csv', models.FileField(null=True, upload_to='pos/products_csv')),
                ('bulk_no', models.CharField(max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_number', models.CharField(blank=True, max_length=255, null=True)),
                ('document', models.FileField(blank=True, null=True, upload_to='pos_grn_invoice')),
            ],
        ),
        migrations.CreateModel(
            name='MeasurementCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('weight', 'Weight'), ('volume', 'Volume')], max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MeasurementUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit', models.CharField(max_length=50, unique=True)),
                ('conversion', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('default', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_status', models.CharField(blank=True, choices=[('payment_pending', 'Payment Pending'), ('payment_approved', 'Payment Approved'), ('payment_failed', 'Payment Failed'), ('to_be_reconsile', 'TO_BE_RECONSILE'), ('payment_conflict', 'RECONSILE_CONFLICT'), ('double_payment', 'DOUBLE_PAYMENT'), ('payment_not_required', 'PAYMENT_NOT_REQUIRED')], max_length=50, null=True)),
                ('payment_mode', models.CharField(blank=True, choices=[('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('UPI', 'UPI'), ('NET_BANKING', 'Net Banking'), ('WALLET', 'Wallet')], max_length=50, null=True)),
                ('transaction_id', models.CharField(blank=True, default=None, help_text='Transaction ID for Non Cash Payments.', max_length=70, null=True)),
                ('payment_id', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('is_refund', models.BooleanField(blank=True, default=False, null=True)),
                ('request_id', models.CharField(blank=True, max_length=18, null=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('refund_status', models.CharField(blank=True, max_length=18, null=True)),
            ],
            options={
                'verbose_name': 'Buyer - Payment',
            },
        ),
        migrations.CreateModel(
            name='PaymentReconsile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tranjection_id', models.CharField(max_length=50)),
                ('reconcile_status', models.CharField(choices=[('to_be_reconsile', 'TO_BE_RECONSILE'), ('payment_not_found', 'PAYMENT_NOT_FOUND'), ('payment_failed', 'PAYMENT_FAILED'), ('payment_success', 'PAYMENT_SUCCESS'), ('payment_conflict', 'RECONSILE_CONFLICT'), ('double_payment', 'DOUBLE_PAYMENT'), ('payment_not_required', 'PAYMENT_NOT_REQUIRED')], default='to_be_reconsile', max_length=50)),
                ('payment_id', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('payment_mode', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment-Reconsile',
            },
        ),
        migrations.CreateModel(
            name='PaymentStatusUpdateByCron',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_status', models.CharField(blank=True, choices=[('payment_pending', 'Payment Pending'), ('payment_approved', 'Payment Approved'), ('payment_failed', 'Payment Failed'), ('to_be_reconsile', 'TO_BE_RECONSILE'), ('payment_conflict', 'RECONSILE_CONFLICT'), ('double_payment', 'DOUBLE_PAYMENT'), ('payment_not_required', 'PAYMENT_NOT_REQUIRED')], max_length=50, null=True)),
                ('payment_mode', models.CharField(blank=True, choices=[('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('UPI', 'UPI'), ('NET_BANKING', 'Net Banking'), ('WALLET', 'Wallet')], max_length=50, null=True)),
                ('transaction_id', models.CharField(blank=True, default=None, help_text='Transaction ID for Non Cash Payments.', max_length=70, null=True)),
                ('payment_id', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'cron log order status',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('cash', 'Cash'), ('online', 'Online'), ('credit', 'Credit'), ('cod', 'Cash on Delivery'), ('cod_upi', 'UPI on Cash on Delivery')], max_length=50)),
                ('enabled', models.BooleanField(default=True)),
                ('app', models.CharField(choices=[('pos', 'POS'), ('ecom', 'ECOM'), ('both', 'Both')], default='pos', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Mode',
                'verbose_name_plural': 'Payment Modes',
            },
        ),
        migrations.CreateModel(
            name='PosCart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('po_no', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('open', 'Open'), ('partially_delivered', 'Partially Delivered'), ('fully_delivered', 'Completely Delivered'), ('cancelled', 'Cancelled')], default='open', max_length=200, null=True)),
                ('gf_order_no', models.CharField(max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Store - PO',
            },
        ),
        migrations.CreateModel(
            name='PosCartProductMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.DecimalField(decimal_places=3, default=0, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('pack_size', models.PositiveIntegerField(default=1)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('is_grn_done', models.BooleanField(default=False)),
                ('is_bulk', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PosGRNOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grn_id', models.CharField(blank=True, max_length=255, null=True)),
                ('invoice_no', models.CharField(max_length=100, null=True)),
                ('invoice_date', models.DateField(null=True)),
                ('invoice_amount', models.DecimalField(decimal_places=4, default='0.0000', max_digits=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Store - GRN',
            },
        ),
        migrations.CreateModel(
            name='PosGRNOrderProductMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('received_qty', models.DecimalField(decimal_places=3, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('pack_size', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PosOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_no', models.CharField(blank=True, max_length=255, null=True, verbose_name='PO Number')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PosReturnGRNOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pr_number', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('RETURNED', 'Returned'), ('CANCELLED', 'Cancelled')], default='RETURNED', max_length=10)),
                ('debit_note_number', models.CharField(blank=True, max_length=255, null=True)),
                ('debit_note', models.FileField(blank=True, null=True, upload_to='pos/purchase_return/documents/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Store - GRN - Return',
            },
        ),
        migrations.CreateModel(
            name='PosReturnItems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selling_price', models.FloatField(blank=True, null=True)),
                ('return_qty', models.DecimalField(decimal_places=3, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('pack_size', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Store - GRN - Return items',
            },
        ),
        migrations.CreateModel(
            name='PosTrip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip_type', models.CharField(choices=[('ECOM', 'Ecom')], max_length=10)),
                ('trip_start_at', models.DateTimeField(blank=True, null=True)),
                ('trip_end_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('product', 'Product'), ('cart', 'Cart')], max_length=20)),
                ('event_id', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductChangeFields',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(choices=[('selling_price', 'Selling Price'), ('mrp', 'MRP'), ('offer_price', 'offer_price'), ('offer_start_date', 'Offer Start Date'), ('offer_end_date', 'Offer End Date')], max_length=255)),
                ('old_value', models.CharField(max_length=255, null=True)),
                ('new_value', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RetailerProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('product_ean_code', models.CharField(max_length=255, null=True)),
                ('mrp', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('offer_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('offer_start_date', models.DateField(blank=True, null=True)),
                ('offer_end_date', models.DateField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('sku_type', models.IntegerField(choices=[(1, 'CREATED'), (2, 'LINKED'), (4, 'DISCOUNTED')], default=1)),
                ('status', models.CharField(choices=[('active', 'Active'), ('deactivated', 'Deactivated')], default='active', max_length=20, verbose_name='Product Status')),
                ('product_pack_type', models.CharField(choices=[('packet', 'Packet'), ('loose', 'Loose')], default='packet', max_length=50)),
                ('purchase_pack_size', models.PositiveIntegerField(default=1)),
                ('initial_purchase_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('online_enabled', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('online_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
            options={
                'verbose_name': 'Product',
            },
        ),
        migrations.CreateModel(
            name='RetailerProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_name', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('image_alt_text', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_NAME', message='Invalid name. Only alphabets are allowed', regex='^[a-zA-Z\\s]{2,255}$')])),
                ('image', models.ImageField(upload_to='uploads/retailer_product_image/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Product Image',
            },
        ),
        migrations.CreateModel(
            name='ShopCustomerMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Store - Customer Mapping',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('vendor_name', models.CharField(max_length=255)),
                ('contact_person_name', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=10)),
                ('alternate_phone_number', models.CharField(max_length=10, null=True)),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('address', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_NAME', message='Invalid address. Special characters allowed are # - , / . ( ) &', regex='^[\\w*\\s*\\#\\-\\,\\/\\.\\(\\)\\&]*$')])),
                ('pincode', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator(code='INVALID_PINCODE', message='Invalid Pincode', regex='^[1-9][0-9]{5}$')])),
                ('gst_number', models.CharField(max_length=100)),
                ('status', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Store - Vendor',
            },
        ),
    ]
