[MASTER]
profile=no
persistent=yes
ignore=migrations
cache-size=500

[MESSAGES CONTROL]
# C0111 Missing docstring
# I0011 Warning locally suppressed using disable-msg
# I0012 Warning locally suppressed using disable-msg
# W0704 Except doesn't do anything Used when an except clause does nothing but "pass" and there is no "else" clause
# W0142 Used * or * magic* Used when a function or method is called using *args or **kwargs to dispatch arguments.
# W0212 Access to a protected member %s of a client class
# W0223 Method '<method_name>' is abstract in class '<class_name>' but is not overridden
# W0232 Class has no __init__ method Used when a class has no __init__ method, neither its parent classes.
# W0613 Unused argument %r Used when a function or method argument is not used.
# W0702 No exception's type specified Used when an except clause doesn't specify exceptions type to catch.
# W1202 Use % formatting in logging functions and pass the % parameters as arguments.
# R0201 Method could be a function
# E1002 Used when an old style class use the super builtin
# E1101 Instance of '*' has no '*' member
# E1103 Instance of '*' has no '*' member (but some types could not be inferred)
# R0801 Similar lines in '*' files
# W0221 Django save method works this way.
# W0614,W0401 Ignoring wild card imports warning as per the suggestion.
# E0213 Django forget and reset function code.
# W0201 Because we need these methods only in sub parts.
## Disabled C1001 and E1002 because we are writing code that uses new style of class definition and Pylint many a times goes wrong here.
## Reference: http://stackoverflow.com/questions/15257534/django-forms-modelform-pylint-and-new-old-style-classes#answer-15257589

disable=C0111,C1001,I0011,I0012,W0704,W0142,W0212,W0223,W0232,W0613,W0702,W1202,R0201,E1002,E1101,E1103,R0801,W0221,W0614,W0401,E0213,W0201

[REPORTS]
output-format=parseable
include-ids=yes


[BASIC]
no-docstring-rgx=__.*__|_.*
class-rgx=[A-Z_][a-zA-Z0-9_]+$
function-rgx=[a-zA-Z_][a-zA-Z0-9_]{2,70}$
method-rgx=[a-z_][a-zA-Z0-9_]{2,70}$
const-rgx=(([A-Z_][A-Z0-9_]*)|([a-z_][a-z0-9_]*)|(__.*__)|register|urlpatterns|User)$
variable-rgx=[a-z_][a-z0-9_]{2,70}$
good-names=_,i,j,k,e,qs,pk,ip,setUp,tearDown

[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject

# When zope mode is activated, add a predefined set of Zope acquired attributes
# to generated-members.
zope=no

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed.
generated-members=objects,DoesNotExist,MultipleObjectsReturned,id,pk,_meta,base_fields,context,is_valid,errors,fields,cleaned_data,content,status_code,kwargs,request,instance

# List of method names used to declare (i.e. assign) instance attributes
defining-attr-methods=__init__,__new__,setUp


[VARIABLES]
init-import=no
dummy-variables-rgx=_|dummy

[SIMILARITIES]
min-similarity-lines=6
ignore-comments=yes
ignore-docstrings=yes


[MISCELLANEOUS]
notes=FIXME,XXX,TODO


[FORMAT]
max-line-length=160
# Increasing this value to 2000 from 500 (default)
max-module-lines=2000
indent-string='    '


[DESIGN]
max-args=10
max-locals=25
max-returns=6
# Increasing this value to 25 from 12
max-branches=25
# Increasing this value to 100 from 50
max-statements=100
# class based views in Django have parents of in-built classes more than 7, so changing it to 20
max-parents=20
max-attributes=15
min-public-methods=0
# some in-built classes, like TestCase, in Django have public-methods more than 50, so changing it to 80
max-public-methods=80
