# Generated by Django 2.1 on 2022-04-04 16:24

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BulkProductTaxUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('file', models.FileField(upload_to='products/producttaxmapping/')),
            ],
            options={
                'verbose_name_plural': 'Bulk Product Tax Update',
            },
        ),
        migrations.CreateModel(
            name='BulkUploadForGSTChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('file', models.FileField(upload_to='products/producttaxmapping/')),
            ],
            options={
                'verbose_name_plural': 'Bulk Upload For GST Change',
            },
        ),
        migrations.CreateModel(
            name='BulkUploadForProductAttributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('file', models.FileField(upload_to='products/product_attributes/')),
                ('upload_type', models.CharField(default='', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CentralLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(blank=True, max_length=50, null=True)),
                ('update_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChildProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('image_name', models.CharField(blank=True, max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('image', models.ImageField(blank=True, upload_to='child_product_image')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('color_code', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='DestinationRepackagingCostMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_material', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('wastage', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('fumigation', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('label_printing', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('packing_labour', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('primary_pm_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('secondary_pm_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('final_fg_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('conversion_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='Flavor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flavor_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('flavor_code', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Fragrance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fragrance_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('fragrance_code', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='PackageSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pack_size_value', models.CharField(blank=True, max_length=255, null=True)),
                ('pack_size_unit', models.CharField(choices=[('mm', 'Millimeter'), ('cm', 'Centimeter'), ('dm', 'Decimeter'), ('m', 'Meter')], default='mm', max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_UNIT_NAME', message='Invalid unit name (eg: kg, litres)', regex='^[a-zA-Z]+$')])),
                ('pack_size_name', models.SlugField(unique=True)),
                ('pack_length', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_UNIT_NAME', message='Invalid unit name (eg: kg, litres)', regex='^[a-zA-Z]+$')])),
                ('pack_width', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_UNIT_NAME', message='Invalid unit name (eg: kg, litres)', regex='^[a-zA-Z]+$')])),
                ('pack_height', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_UNIT_NAME', message='Invalid unit name (eg: kg, litres)', regex='^[a-zA-Z]+$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Package Size',
                'verbose_name_plural': 'Package Sizes',
            },
        ),
        migrations.CreateModel(
            name='ParentProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('status', models.BooleanField(default=True)),
                ('parent_id', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PARENT_ID', message='Invalid Parent ID.(eg: PABCDEF0023)', regex='^[P][A-Z]{3}[A-Z]{3}[\\d]{4}$')])),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('parent_slug', models.SlugField(max_length=255)),
                ('inner_case_size', models.PositiveIntegerField(default=1)),
                ('brand_case_size', models.PositiveIntegerField()),
                ('product_type', models.CharField(choices=[('b2b', 'B2B'), ('b2c', 'B2C'), ('both', 'Both B2B and B2C')], default='both', max_length=5)),
                ('is_ptr_applicable', models.BooleanField(default=False, verbose_name='Is PTR Applicable')),
                ('ptr_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_PERCENTAGE', message='Invalid percentage. Only positive value is accepted without %(eg: 10,10.5).', regex='^(?=.+)(?:[1-9]\\d*|0)?(?:\\.\\d+)?$')])),
                ('ptr_type', models.SmallIntegerField(blank=True, choices=[(1, 'Mark Up'), (2, 'Mark Down')], null=True)),
                ('is_ars_applicable', models.BooleanField(default=False, verbose_name='Is ARS Applicable')),
                ('max_inventory', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)], verbose_name='Max Inventory(In Days)')),
                ('is_lead_time_applicable', models.BooleanField(default=False)),
                ('discounted_life_percent', models.DecimalField(decimal_places=2, default=0, max_digits=4, validators=[django.core.validators.RegexValidator(code='INVALID_PERCENTAGE', message='Invalid percentage. Only positive value is accepted without %(eg: 10,10.5).', regex='^(?=.+)(?:[1-9]\\d*|0)?(?:\\.\\d+)?$')])),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('product_discription', tinymce.models.HTMLField(blank=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ParentProductB2cCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Parent Product B2c Category',
                'verbose_name_plural': 'Parent Product B2c Categories',
            },
        ),
        migrations.CreateModel(
            name='ParentProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Parent Product Category',
                'verbose_name_plural': 'Parent Product Categories',
            },
        ),
        migrations.CreateModel(
            name='ParentProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('image_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('image', models.ImageField(upload_to='parent_product_image')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParentProductSKUGenerator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat_sku_code', models.CharField(help_text='Please enter three characters for SKU', max_length=3, validators=[django.core.validators.RegexValidator('^[A-Z]{3}$', 'Only three capital alphates allowed')])),
                ('brand_sku_code', models.CharField(help_text='Please enter three characters for SKU', max_length=3, validators=[django.core.validators.RegexValidator('^[A-Z]{3}$', 'Only three capital alphates allowed')])),
                ('last_auto_increment', models.CharField(max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='ParentProductTaxMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PriceSlab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_value', models.PositiveIntegerField()),
                ('end_value', models.PositiveIntegerField()),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_PRICE', message='Invalid price.(eg: 1000, 200.50)', regex='^\\d{0,8}(\\.\\d{1,4})?$')], verbose_name='Selling Price(Per piece)')),
                ('offer_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_PRICE', message='Invalid price.(eg: 1000, 200.50)', regex='^\\d{0,8}(\\.\\d{1,4})?$')], verbose_name='Offer Price(Per piece)')),
                ('offer_price_start_date', models.DateField(blank=True, null=True)),
                ('offer_price_end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Price Slab Category',
                'verbose_name_plural': 'Price Slabs',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('product_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('product_slug', models.SlugField(blank=True, max_length=255)),
                ('product_sku', models.CharField(max_length=255, unique=True)),
                ('product_ean_code', models.CharField(blank=True, max_length=255)),
                ('product_mrp', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('weight_value', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('weight_unit', models.CharField(choices=[('gm', 'Gram')], default='gm', max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_UNIT_NAME', message='Invalid unit name (eg: kg, litres)', regex='^[a-zA-Z]+$')])),
                ('product_special_cess', models.FloatField(null=True)),
                ('moving_average_buying_price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('status', models.CharField(choices=[('pending_approval', 'Pending Approval'), ('active', 'Active'), ('deactivated', 'Deactivated')], default='pending_approval', max_length=20, verbose_name='Product Status')),
                ('reason_for_child_sku', models.CharField(choices=[('default', 'Default'), ('different_mrp', 'Different MRP'), ('different_weight', 'Different Weight'), ('different_ean', 'Different EAN'), ('offer', 'Offer'), ('near_expiry', 'Near Expiry')], default='default', max_length=20)),
                ('use_parent_image', models.BooleanField(default=False)),
                ('repackaging_type', models.CharField(choices=[('none', 'None'), ('source', 'Source'), ('destination', 'Destination'), ('packing_material', 'Packing Material')], default='none', max_length=20)),
                ('product_type', models.PositiveSmallIntegerField(choices=[(0, 'normal'), (1, 'discounted')], default=0, max_length=20)),
                ('is_manual_price_update', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Child Product',
                'verbose_name_plural': 'Child Products',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ProductB2cCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Product B2c Category',
                'verbose_name_plural': 'Product B2c Categories',
            },
        ),
        migrations.CreateModel(
            name='ProductB2cCategoryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductCapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capping_qty', models.PositiveIntegerField(default=0, null=True)),
                ('capping_type', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Daily'), (1, 'Weekly'), (2, 'Monthly')], null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
            },
        ),
        migrations.CreateModel(
            name='ProductCategoryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductCSV',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='products/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Product CSV',
                'verbose_name_plural': 'Product CSVS',
            },
        ),
        migrations.CreateModel(
            name='ProductHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('product_short_description', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('product_long_description', models.TextField(blank=True, null=True)),
                ('product_sku', models.CharField(blank=True, max_length=255, null=True)),
                ('product_ean_code', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_EAN_CODE', message='Invalid EAN code. Exactly 13 numbers required', regex='^\\d{13}$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductHSN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('status', models.BooleanField(default=True)),
                ('product_hsn_code', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('image_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('image', models.ImageField(upload_to='product_image')),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductPackingMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('packing_sku_weight_per_unit_sku', models.DecimalField(decimal_places=2, max_digits=10, null=True, verbose_name='Packing Material Weight (gm) Per Unit (Qty) Of Destination Sku')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Packing Material Product',
            },
        ),
        migrations.CreateModel(
            name='ProductPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mrp', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('price_to_retailer', models.FloatField(null=True)),
                ('start_date', models.DateTimeField(null=True)),
                ('end_date', models.DateTimeField(null=True)),
                ('approval_status', models.IntegerField(blank=True, choices=[(2, 'Active'), (1, 'Approval Pending'), (0, 'Deactivated')], default=2, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductPriceCSV',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='products/price/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Product Price CSV',
                'verbose_name_plural': 'Product Price CSVS',
            },
        ),
        migrations.CreateModel(
            name='ProductSKUGenerator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_cat_sku_code', models.CharField(help_text='Please enter three characters for SKU', max_length=3, validators=[django.core.validators.RegexValidator('^[A-Z]{3}$', 'Only three capital alphates allowed')])),
                ('cat_sku_code', models.CharField(help_text='Please enter three characters for SKU', max_length=3, validators=[django.core.validators.RegexValidator('^[A-Z]{3}$', 'Only three capital alphates allowed')])),
                ('brand_sku_code', models.CharField(help_text='Please enter three characters for SKU', max_length=3, validators=[django.core.validators.RegexValidator('^[A-Z]{3}$', 'Only three capital alphates allowed')])),
                ('last_auto_increment', models.CharField(max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='ProductSourceMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(blank=True, default=True)),
            ],
            options={
                'verbose_name': 'Product Source Mapping',
                'verbose_name_plural': 'Product Source Mappings',
            },
        ),
        migrations.CreateModel(
            name='ProductTaxMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductVendorMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('status', models.BooleanField(default=True)),
                ('product_price', models.FloatField(blank=True, null=True, verbose_name='Brand to Gram Price (Per Piece)')),
                ('product_price_pack', models.FloatField(blank=True, null=True, verbose_name='Brand to Gram Price (Per Pack)')),
                ('brand_to_gram_price_unit', models.CharField(default='Per Piece', max_length=100)),
                ('product_mrp', models.FloatField(blank=True, null=True)),
                ('case_size', models.PositiveIntegerField(default=0)),
                ('is_default', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Repackaging',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='Repackaging ID')),
                ('repackaging_no', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('started', 'Started'), ('completed', 'Completed')], default='started', max_length=50, verbose_name='Repackaging Status')),
                ('source_picking_status', models.CharField(choices=[('pickup_created', 'Pickup Created'), ('picking_assigned', 'Picking Assigned'), ('picking_partial_complete', 'Picking Partial Complete'), ('picking_complete', 'Picking Complete')], default='', max_length=50)),
                ('destination_batch_id', models.CharField(blank=True, max_length=50, null=True)),
                ('source_repackage_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.RegexValidator(code='INVALID_INTEGER_VALUE', message='Only Positive Integers Accepted', regex='^[1-9]\\d*$')], verbose_name='No Of Pieces Of Source SKU To Be Repackaged')),
                ('available_source_weight', models.FloatField(default=0, verbose_name='Available Source SKU Weight (Kg)')),
                ('available_source_quantity', models.PositiveIntegerField(default=0, verbose_name='Available Source SKU Qty (pcs)')),
                ('destination_sku_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.RegexValidator(code='INVALID_INTEGER_VALUE', message='Only Positive Integers Accepted', regex='^[1-9]\\d*$')], verbose_name='Created Destination SKU Qty (pcs)')),
                ('remarks', models.TextField(blank=True, null=True)),
                ('manufacturing_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('destination_sku', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='destination_sku_repackaging', to='products.Product')),
            ],
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_value', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(code='INVALID_VALUE', message='Invalid value. Only numbers are allowed', regex='^[0-9 ]+$')])),
                ('size_unit', models.CharField(choices=[('mm', 'Millimeter'), ('cm', 'Centimeter'), ('dm', 'Decimeter'), ('m', 'Meter')], default='mm', max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_UNIT_NAME', message='Invalid unit name (eg: kg, litres)', regex='^[a-zA-Z]+$')])),
                ('size_name', models.SlugField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('status', models.BooleanField(default=True)),
                ('tax_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_PRODUCT_NAME', message='Invalid product name. Special characters allowed are _ , @ . / # & + -', regex='^[ \\w\\$\\_\\,\\%\\@\\.\\/\\#\\&\\+\\-\\(\\)]*$')])),
                ('tax_type', models.CharField(choices=[('cess', 'Cess'), ('gst', 'GST'), ('surcharge', 'Surcharge'), ('tcs', 'TCS')], max_length=255)),
                ('tax_percentage', models.FloatField(default=0)),
                ('tax_start_at', models.DateField(blank=True, null=True)),
                ('tax_end_at', models.DateField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.User', verbose_name='Created by')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tax_updated_by', to='accounts.User')),
            ],
            options={
                'verbose_name': 'Tax',
                'verbose_name_plural': 'Taxes',
            },
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('status', models.BooleanField(default=True)),
                ('weight_value', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('weight_unit', models.CharField(choices=[('gm', 'Gram')], default='kg', max_length=255, validators=[django.core.validators.RegexValidator(code='INVALID_UNIT_NAME', message='Invalid unit name (eg: kg, litres)', regex='^[a-zA-Z]+$')])),
                ('weight_name', models.SlugField(unique=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.User', verbose_name='Created by')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='weight_updated_by', to='accounts.User')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
